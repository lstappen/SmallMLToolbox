import math
import argsparse
# Updated and transfered to Python by Lukas Stappen <stappen@ieee.org>
# Header: /u/drspeech/src/utils/signif/RCS/signif,v 1.5 1996/06/27 00:16:19 bilmes Exp 
# Written by Jeff Bilmes <bilmes@icsi.berkeley.edu>
# Wed Jun 26 1996
# This is Perl transformed version written by Jeff Bilmes, of a reverse engineered version 
# of the old signif program written by Chuck Wooters but for which we have no source. 
# signif:
# Usage:
#   signif -p1 p1 -p2 p2 -N N

#  Assumption: We've run two experiments each consisting of N
#  independent trials. In the first experiment, p1*N of the trials
#  came out true. In the second experiment, p2*N of the trials came
#  out true.  We want to find out if p2 is significantly (in a
#  statistical sence) better than p1 under N samples.  We do
#  this by assuming a null hypothesis, H0, and seeing how unlikely
#  this null hypothesis is.

#  Since we want to test whether one process (p2) is better than
#  another p1 (as apposed to testing whether one process is either
#  better or worse than another), we use the two
#  hypothesis.
#
#    H0: p1 == p2, i.e., the scores are really identical
#    H1: p1 > p2 , i.e., and p2 is indeed better than p1 at
#                        the current significance level.
# 
#  We do this by assuming H0 and then disproving it at various
#  significance levels.
#
#  We compute the z-score from the statistics of 
#  the difference between two random variables with their
#  corresponding distributions. We get:
#      u_diff = p1 - p2                 (1)
#  and standard deviation
#      sigma_diff = sqrt(p1*q1/N + p2*q2/N)         (2)
#
#  where q1 = 1-p1 and q2 = 1-p2. The distribution of
#  this difference, we assume, is approximately
#  normal with a large enough sample size (N) and therefore
#  we can compute the normalized z-score as:
#   z = (p1-p2)/sigma_diff
#  
#  Once we have this z-score and since we are interested in if
#  one process is better than the other, use use a one-tailed
#  rather than a two-tailed significance test.

#  One tailed significance values.  Note: The older version of signif
#  (the one Chuck Wooters wrote and the one we can't find the source
#  for) used only two digits of precision for the significance values
#  (in particular, that program used 2.33 and 1.65 for significance
#  levels 0.05 and 0.01 respectively). We use more digits of precision
#  and therefore get slightly different results.
#  These values came from mapleV using the commands:
#      with(stats):
#           statevalf[icdf,normald](v);
#  where v takes on the significance levels 0.10, 0.05, etc.

signif_vals = {
    # levels   values
      0.10:   1.281551566,
      0.05:   1.644853627,
      0.01:   2.326347874,
      0.005:  2.575829304,
      0.002:  2.878161739,
      0.001:  3.090232306
        }

print("Usage: signif -a p1 -b p2 -n N\n" +
  "   where p1 = the probability of event A (error score of process A)\n" +
  "   where p1 = the probability of event B (error score of process B)\n" +
  "   N is the number trials (number of examples)\n")
parser = argparse.ArgumentParser(description = 'One tailed significance test for small data sets')
# raw data paths
parser.add_argument('-p1', type = float, dest = 'p1', required = False, action = 'store', 
                    default = 0.5, help = 'the probability of event A') 
parser.add_argument('-p2', type = float, dest = 'p2', required = False, action = 'store', 
                    default = 0.68, help = 'the probability of event B') 
parser.add_argument('-N', type = int, dest = 'N', required = False, action = 'store', 
                    default = 200,help = 'N is the number data pints')
args = parser.parse_args()

p1 = args.p1
p2 = args.p2
N = args.N

diff = (p1-p2)
if (diff < 0):
    diff = -diff 

print("Number of patterns differing is = %d\n" % int(diff*N+0.5))

if (p1 == p2):
    print("WARNING: p1 = p2 = p1. Therefore, this difference is not significant at any level.\n")
    exit(0)

sigma = math.sqrt((p1*(1.0-p1)+p2*(1-p2))/N)
z = diff/sigma

print ("This difference is:\n")

for level in signif_vals.keys():
    val = signif_vals[level]
    if (z <= val):
        print("Not significant")
        # i.e., with probability 1.0 - level, this difference
        # could have been generated by the null hypothesis.
    else:
        print("Significant")
        # i.e., with probability level, this difference
        # could have been generated by the null hypothesis. 
        # Since level is small, we say this is significant.
    
    print(" at the %.3f level (%0.2f differences required)\n" % (level, N*val*sigma))

